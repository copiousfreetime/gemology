cor(volume_by_day$date, volume_by_day$x, method="spearman")
cor(volume_by_day$date, volume_by_day$x, method="kendall")
fit <- lm(volume_by_day$x, volume_by_day$date)
help(lm)
fit <- lm(x ~ date)
fit <- lm(x ~ date, volume_by_day))
fit <- lm( x ~ date )
fit <- lm( x ~ date, volume_by_day )
fit
fit()
attributes(fit)
residuals( fit )
abline(fit)
plot( volume_by_day$date, volume_by_day$x)
abline(fit)
summary(fit)
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( "Date", "factor", "numeric", "numeric", "numeric"))
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( "Date", "factor", "numeric", "numeric", "numeric")
)
help(read.csv)
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( "Date", "factor", "numeric", "numeric", "numeric"), col.names = c("tiemstamp", "status", "duration","bytes","concurrent"))
help(read.csv)
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( as.Date(format = "%d/%a/%Y:%T"), "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( as.Date(x,format = "%d/%a/%Y:%T"), "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( NA, "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
print(testf)
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( NA, "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"), as.is = format )
help(scan)
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c( "character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"), as.is = format )
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf$timestamp
testf$ts = as.Date(test$timestamp, "%d/%a/%Y:%H:%M:%S")
testf$ts = as.Date(testf$timestamp, "%d/%a/%Y:%H:%M:%S")
qplot( ts, duration, colour = status )
qplot( ts, duration, data = testf, colour = status )
libarary( 'ggraph2')
library( 'ggraph2')
library( 'gplot2')
library( 'ggplot2')
qplot( ts, duration, data = testf, colour = status )
qplot( bytes, duration, data = testf, colour = status )
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf$ts = as.Date(testf$timestamp, "%d/%a/%Y:%H:%M:%S")
summary( testf )
test$ts
testf$ts
testf$ts = as.Date(testf$timestamp, "%d/%a/%Y:%H:%M:%S")
help(substr)
testf$ts = as.Date(substr(testf$timestamp,0,20), "%d/%a/%Y:%H:%M:%S")
print(test$ts)
print(testf$ts)
substr(testf$timestamp,0,20)
as.Date(substr(testf$timestamp,0,20), "%d/%a/%Y:%T")
help(as.Date)
as.Date(substr(testf$timestamp,0,20), format = "%d/%a/%Y:%T")
as.Date(substr(testf$timestamp,0,20), format = "%d/%a/%Y:%H:%M:%S")
strptime(substr(testf$timestamp,0,20), format = "%d/%a/%Y:%H:%M:%S")
strptime("29/Oct/2009:04:02:25", format = "%d/%a/%Y:%H:%M:%S")
strptime("29/Oct/2009:04:02:25", format = "%d/%B/%Y:%H:%M:%S")
strptime("29/Oct/2009:04:02:25.356", format = "%d/%B/%Y:%H:%M:%S")
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf$ts = as.Date(substr(test$timestamp,0,20), "%d/%B/%Y:%H:%M:%S")
testf$ts = as.Date(substr(testf$timestamp,0,20), "%d/%B/%Y:%H:%M:%S")
print(testf)
testf$ts = strptime(substr(testf$timestamp,0,20), "%d/%B/%Y:%H:%M:%S")
strptime(substr(testf$timestamp,0,20), "%d/%B/%Y:%H:%M:%S")
x = strptime(substr(testf$timestamp,0,20), "%d/%B/%Y:%H:%M:%S")
size(x)
length(x)
print(x)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S")
print(x)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S", tz="EDT"))
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S", tz="EDT")
print(x)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S")
print(x)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S", tz=EDT)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S", tz=""EDT"")
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S", tz="EDT")
print(x)
x = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S")
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf$ts = as.POSIXct(testf$timestamp, format="%d/%B/%Y:%H:%M:%S")
qplot( ts, duration, data = testf, colour = status )
qplot( ts, duration, data = testf, colour = status, breaks="second" )
data = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/varnish-haproxy.csv"#
          header = FALSE, #
          colClasses = c("character", "factor", "numeric", "numeric", "numeric"), #
          col.names = c("timestamp", "status", "duration","bytes","concurrent"))
data = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/varnish-haproxy.csv"#
          header = FALSE, #
          colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
data = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/varnish-haproxy.csv" header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
testf = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/test.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
data = read.csv( "/Users/jeremy/Projects/problems/2009-10-30_varnish-log/varnish-haproxy.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
library( 'ggplot2')
data = read.csv( "/tmp/halog.csv", header = FALSE, colClasses = c("character", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
data = read.csv( "/tmp/halog_minute.csv", header = FALSE, colClasses = c("character", "factor", "factor", "numeric", "numeric", "numeric"), col.names = c("timestamp", "status", "duration","bytes","concurrent"))
data = read.csv( "/tmp/halog_minute.csv", header = TRUE, colClasses = c("POSIXct", "factor", "factor", "numeric", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric","numeric"))
help(POSIXct)
data = read.csv( "/tmp/halog_minute.csv", header = TRUE, colClasses = c("POSIXct", "factor", "factor", "numeric", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric","numeric","numeric"))
data200 = subset( data, status == 200)
qplot(ts, duration, data = data200, colour = host)
qplot(ts, duration_avg, data = data200, colour = host)
qplot(ts, log10(duration_avg), data = data200, colour = host)
qplot(ts, count, data = data200, colour = host)
qplot(ts, cnt, data = data200, colour = host)
qplot(ts, log10(cnt), data = data200, colour = host)
qplot(ts, log10(cnt), data = data200, colour = host, point = 1)
qplot(ts, log10(cnt), data = data200, colour = host, gemo = c("point", "smooth")))
qplot(ts, log10(cnt), data = data200, colour = host, gemo = c("point", "smooth"))
qplot(ts, log10(cnt), data = data200, colour = host, gemo = smooth)
qplot(ts, log10(cnt), data = data200, colour = host, geom = c("point", "smooth"))
data404 = subset( data, status == 404)
data409 = subset( data, status == 409)
data201 = subset( data, status == 201)
qplot(ts, log10(cnt), data = data201, colour = host, geom = smooth)
qplot(ts, log10(cnt), data = data201, colour = host, geom = point, shape = .)
qplot(ts, log10(cnt), data = data201, colour = host, shape = .)
summary(data201)
size(data201)
data201.size
length(data201)
qplot(ts, log10(cnt), data = data409, colour = host, shape = .)
qplot(ts, log10(cnt), data = data409, colour = host, shape = ".")
qplot(ts, log10(cnt), data = data409, colour = host) + geom_point(shape = 1)
qplot(ts, log10(cnt), data = data409)
qplot(ts, cnt, data = data409)
qplot(ts, log10(cnt), data = data409, colour = host) + geom_point(shape = ".")
qplot(ts, log10(cnt), data = data404, colour = host) + geom_point(shape = ".")
qplot(ts, log10(cnt), data = data201, colour = host) + geom_point(shape = ".")
qplot(ts, log10(duration_stddev), data = data201, colour = host) + geom_point(shape = ".")
qplot(ts, duration_stddev, data = data201, colour = host) + geom_point(shape = ".")
qplot(ts, duration_max, data = data201, colour = host) + geom_point(shape = ".")
qplot(ts, log(duration_max), data = data201, colour = host) + geom_point(shape = ".")
qplot(ts, concurrency, data = data, colour = host)
qplot(ts, concurrency_max, data = data, colour = host)
qplot(ts, concurrency_max, data = data, geom = c("point", "smooth")))
qplot(ts, concurrency_max, data = data, geom = c("point", "smooth"))
con_data = read.csv("/tmp/concurrency.csv", header = TRUE, colClasses = c("POSIXct", "numeric"))
qplot( ts, conn, geom = c("point", "smooth"))
qplot( ts, conn, data = con_data, geom = c("point", "smooth"))
x = qplot( ts, conn, data = con_data, geom = c("point", "smooth"))
ggsave("/tmp/concurrency.pdf")
ggsave("~/tmp/concurrency.pdf")
req_data = read.csv("/tmp/requests.csv", header = TRUE, colClasses = c("POSIXct", "numeric"))
qplot(ts, reqests, data = req_data, gemo = c("point", "smooth"))
qplot(ts, requests, data = req_data, gemo = c("point", "smooth"))
qplot(ts, requests, data = req_data, geom = c("point", "smooth"))
ggsave("~/tmp/requests.pdf")
qplot(ts, requests, data = req_data, geom = "smooth")
voldata = req_data
voldata$conn = con_data$conn
p <- ggplot( voldata, aes( ts, requests, geom = "smooth"))
p
p <- ggplot( voldata, aes( ts, requests ))
p + layer(geom="smooth")
p <- ggplot( voldata )
p <- ggplot( voldata, aes( y = ts ))
p + layer( geom = "smooth", geom_param(y=requests))
p + layer( geom = "smooth", aes( x = requests))
p + layer( geom = "smooth", aes( ts, requests))
p <- ggplot( voldata )
p + layer( geom = "smooth", aes( ts, requests))
p + layer( ts, requests, geom = "smooth")
p + layer( aes( x = ts, y = requests))
p + layer( geom = "smooth", aes( x = ts, y = requests))
summary(p)
p$conn
voldata$conn
voldata$requests
req_data = read.csv("/tmp/voldata.csv", header = TRUE, colClasses = c("POSIXct", "numeric", "numeric"))
vol_data = read.csv("/tmp/voldata.csv", header = TRUE, colClasses = c("POSIXct", "numeric", "numeric"))
qplot( conn, requests, data = vol_data)
cor(vol_data$conn, vol_data$requests)
p <- ggplot( vol_data )
summary(p)
p + geom_smooth(aes( ts, conn))
p + geom_smooth(aes( ts, conn)) + geom_smooth(aes(ts, requests))
p + geom_smooth(aes( ts, conn)) + geom_smooth(aes(ts, log10(requests)))
p + geom_smooth(aes( ts, log10(conn))) + geom_smooth(aes(ts, log10(requests)))
p + geom_smooth(aes( ts, norm(conn))) + geom_smooth(aes(ts, norm(requests)))
help(norm)
help(normalize)
qplot(ts, requests, data = vol_data, geom = c("point", "smooth"))
ggsave("~/tmp/requests.pdf")
qplot(ts, conn, data = vol_data, geom = c("point", "smooth"))
qplot(ts, conn, data = vol_data, geom = c("point", "smooth")) + ylab("concurrency")
qplot(ts, requests, data = vol_data, geom = c("point", "smooth")) + ylab("requests / min") + xlab("time")
ggsave("~/tmp/requests.pdf")
qplot(ts, conn, data = vol_data, geom = c("point", "smooth")) + ylab("concurrency") + xlab("time")
ggsave("~/tmp/concurrency.pdf")
vol_data = read.csv("/tmp/vol_data.csv", header = TRUE, colClasses = c("POSIXct", "numeric", "numeric", "numeric"))
p <- ggplot( vol_data )
qplot(ts, conn, data = vol_data, geom = c("point", "smooth"))
qplot(ts, concurrency, data = vol_data, geom = c("point", "smooth"))
qplot(ts, bytes, data = vol_data, geom = c("point", "smooth"))
qplot(ts, requests, data = vol_data, geom = c("point", "smooth"))
qplot(ts, bytes, data = vol_data, geom = c("point", "smooth"))
qplot(ts, bytes, data = vol_data, geom = c("point", "smooth")) + ylab("bytes transferred"), + xlab("time")
qplot(ts, bytes, data = vol_data, geom = c("point", "smooth")) + ylab("bytes transferred") + xlab("time")
ggsave("~/tmp/bytes.pdf")
library( 'ggplot2')
data = read.csv( "/tmp/halog_second.csv",  header = TRUE, colClasses = c("POSIXct", "factor", "factor", "numeric", "numeric", "numeric", "numeric","numeric", "numeric", "numeric", "numeric","numeric","numeric"))
data = read.csv( "/tmp/halog_second.csv",  header = TRUE, colClasses = c("POSIXct", "factor", "factor", "numeric", "numeric", "numeric", "numeric","numeric", "numeric", "numeric"))
summary(data)
data200 = subselect(data, status == 200)
data200 = subset(data, status == 200)
summary(data200)
data = read.csv( "/tmp/halog_second.csv",  header = TRUE, colClasses = c("POSIXct", "factor", "factor", "numeric", "numeric", "numeric", "numeric","numeric", "numeric", "numeric"))
summary(data)
install.packages("lawstat")
library("lawstat")
x = read.table("/Users/jeremy/Projects/problems/2009-12-14_tc-hash-testing/hash-values.txt")
runs.test(x)
?sample
quit
library('ggplot2')
library("gplot2")
library("ggplot2")
by_day = read.csv( "/Users/jeremy/Projects/ci-git/gems/ci_search/script", header = TRUE, colClases = c("Date", "factor", "numeric"))
by_day = read.csv( "/Users/jeremy/Projects/ci-git/gems/ci_search/script/parent-counts-by-date-and-content-type.csv", header = TRUE, colClases = c("Date", "factor", "numeric"))
by_day = read.csv( "/Users/jeremy/Projects/ci-git/gems/ci_search/script/parent-counts-by-date-and-content-type.csv", header = TRUE, colClasses = c("Date", "factor", "numeric") )
qplot( date, count, data = by_day, colour = content_type, geom = c("point", "smooth"))
f = qplot( date, count, data = by_day, colour = content_type, geom = c("point", "smooth"))
save(f, file = "parent-message-id-counts.png")
save
save()
save( file = )
qplot( date, count, data = by_day, colour = content_type, geom = c("point", "smooth"))
help(save)
ggsave("~/tmp/bytes.pdf")
ggsave("~/parent-message-counts-by-content-type.png")
library("gplot2")
library("ggplot2")
by_day = read.csv( "/Users/jeremy/Projects/ci-git/gems/ci_search/script/parent-counts-by-date-and-content-type.csv", header = TRUE, colClasses = c("Date", "factor", "numeric") )
summary( by_day )
help(summary)
help(subselect)
data200 = subset(data, status == 200)
mb = subset( by_day, content_type == MessagseBoard)
mb = subset( by_day, content_type == MessageBoard)
mb = subset( by_day, content_type == "MessageBoard)
summary(mb)
;
""
quit
"
mb = subset( by_day, content_type == "MessageBoard")
summary(mb)
twit = subset( by_day, content_type == "MicroBlog")
summary(twit)
install.packages("HSAUR")
vignette(package = "HSAUR")
